1. <script> 태그 안에 JS 작성
ex) <script>
        window.onload = function(){
            window.alert("Hello World!");
        }
    </script>

2. var 키워드로 변수 선언
- 자료형 종류
    정수(Integer)
    부동소수(Floating value) == 실수
    문자열(String)
    불린(Boolean)
    배열(Array)
    함수(Function)
    객체(Object)
ex) var {변수명} = 1 or 1.xxx or '{문자열}' or "{문자열}" or true/false;

※ 사칙 연산(Arithmetics) : +, -, *, /, %
※ + : 숫자끼리는 덧셈, 문자열끼리는 연결하는 역할

3. 함수(Function)
-> function 키워드 사용
- Grammar
function {함수명}({매개변수1}, {매개변수2}, ...) { return temp;}

4. 입출력 및 처리
- 입력
-> window.prompt('화면에 출력할 내용');
ex) var temp = window.prompt("변수에 들어갈 내용을 입력하세요");

※ 입력한 내용은 문자열로 인식 -> 숫자의 경우 따로 변환할 필요 있음
- 입력된 문자열 숫자로 변환
-> parseInt({내용});
-> parseFloat({내용});

5. 조건문
- if문
    - Grammar
    if({조건)) {결과}
    else if({조건}) {결과}
    else {결과}

- switch-case문
    - Grammar
    switch({수식}) {
        case {조건} :
            //처리
            break;
        case {조건} :
            //처리
            break;
        default :
            //처리
            break;
    }

- 삼항연산자
    - Grammar
    {조건} ? {참일 때 처리} : {거짓일 때 처리};

6. 반복문
- for문
    - Grammar
    for({변수선언}; {조건}; {증감연산});

- while문
    - Grammar
    while({조건}) {  //처리  }

- do while문
    - Grammar
    do {  //처리  } while({조건});

7. 배열
- new 연산자 사용
-> var temp = new Array();

- 배열 초기화
-> var temp = [1, 2, 3, 4];

- 배열 복제
-> var temp = [1, 2, 3, 4];
   var temp2 = temp;

※ 스칼라 배열 : 0, 1과 같은 숫자로 배열 요소 접근
※ 연관 배열 : 문자열로 배열 요소 접근
ex) temp[0], temp[1] -> 스칼라 배열 / temp["A"], temp["B"] -> 연관 배열


8. 객체
- {}로 객체 선언
-> var temp = { };

- 생성자 함수와 new 연산자를 사용하여 선언
-> function constructor() {   }
   var temp = new constructor();

- 객체 직접 생성
-> var myObject = {
    name : 'My name is ...',         // 객체의 속성
    speak : function()              // 객체의 메소드
        window.alert(this.name)
    }
};

- 생성자 함수를 이용하여 객체 생성
-> var objectMaker = function() {
    this.name = 'My name is ...',
    this.speak = function() {
        window.alert(this.name));
    };
};
var myObject = new objectMaker();
myObject.speak();

9. Event
<input type="button" onclick="hey()" value="클릭" />
-> onclick 부분이 Event
-> hey() 함수가 Event 핸들러 or Event 리스너

※ button 부분 참고
window.onload = function() {
    function hey() {
        window.alert("hey!")결
    };

    // id의 속성값이 mybutton인 button에 event handler 연결
    var button = document.getElementById("mybutton");
    button.onclick = hey;
};
※ window.onload -> 웹 문서의 모든 요소가 준비가 된 후 실행
※ document.getElementById : ID 명을 기준으로 DOM 요소 탐색
※ document.getElementByClassName : 클래스명을 기준으로 DOM 요소 탐색
※ document.getElementByTagName : 태그명을 기준으로 DOM 요소 탐색

10. JSON(JavaScript Object Notation)
-> 가볍고 표현력이 넓음, 용량이 적다!
-> 자바스크립트의 객체 표기법

- Grammar
{
    "{키}" : "{값}",
    "{키}" : {      // Object
        "{키}" : "{값}"
    }
    "{키}" : [      // Array
        "{원소1}",
        "{원소2}",
        "{원소3}"
    ]
}

※ JSONP(JSON with Padding)
-> JSON과 비슷, callback으로 객체를 감쌈
-> 외부에 있는 자바스크립트 파일을 불러오는 방식

- Grammar
callback(
    {
        "{키}" : "{값}",
        "{키}" : "{값}"
    }
)

11. 자바스크립트 내장 객체
1) window 객체
- alert({String}) : 웹 브라우저에 문자열을 창으로 출력
- confirm({String}) : alert와 비슷, 확인 및 취소 버튼이 있고 확인은 참을, 취소는 거짓을 반환
- prompt({String}) : 사용자로부터 값을 입력받음
- innerHeight : 현재 사용 중인 기기의 웹 브라우저의 높이 반환
- innerWidth : 현재 사용 중인 기기의 웹 브라우저의 너비 반환

2) location 객체
- href : 웹 페이지 주소 이동
ex) location.href = "https://www.naver.com";    // 네이버로 이동

3) document 객체
